{"version":3,"file":"static/js/697.8c6e7c0f.chunk.js","mappings":"0RAMe,SAASA,IACtB,OAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAIQC,GAAOC,EAAAA,EAAAA,MAAPD,GAEFE,GAAWC,EAAAA,EAAAA,MAsBjB,OAnBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,uFACZL,EADY,iEAKfH,GAAa,GALE,UAMIS,EAAAA,EAAAA,IAAeN,GANnB,OAMTO,EANS,OAOfZ,EAASY,GAPM,kDASfR,EAAS,EAAD,IATO,yBAWfF,GAAa,GAXE,6EAAH,qDAehBQ,GACD,GAAE,CAACL,KAGF,4BACGJ,IAAa,SAAC,IAAD,IACbE,IAAS,iDACV,4BACE,oBAAQU,QA1BC,kBAAMN,EAAS,IAAf,EA0BgBO,KAAK,SAA9B,WACE,SAAC,MAAD,IADF,aAOCf,IACC,gCACE,gBAAKgB,IAAG,UAxCF,oCAwCE,OAAehB,EAAMiB,aAAeC,IAAKlB,EAAMmB,SACvD,4BACE,wBAAKnB,EAAMmB,SACX,uCAAenB,EAAMoB,aAAaC,QAAQ,OAC1C,sCACA,uBAAIrB,EAAMsB,YACV,oCACA,uBAAItB,EAAMuB,OAAOC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,mBAKvD,4BACE,mDACA,SAAC,KAAD,CAASC,GAAG,OAAZ,oBACA,SAAC,KAAD,CAASA,GAAG,UAAZ,yBAEF,SAAC,KAAD,MAGL,C","sources":["components/MovieReview/MovieReview.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams, useNavigate, Outlet, NavLink } from 'react-router-dom';\nimport { AiOutlineArrowLeft } from 'react-icons/ai';\nimport { getMovieReview } from 'Shared/API/FetchMovies';\nimport Loader from 'components/Loader/Loader';\n\nexport default function MovieReview() {\n  const [movie, setMovie] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const IMG_URL = 'https://images.tmdb.org/t/p/w500';\n\n  const { id } = useParams();\n  // const location = useLocation();\n  const navigate = useNavigate();\n  const goBack = () => navigate('/');\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      if (!id) {\n        return;\n      }\n      try {\n        setIsLoading(true);\n        const data = await getMovieReview(id);\n        setMovie(data);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMovie();\n  }, [id]);\n\n  return (\n    <main>\n      {isLoading && <Loader />}\n      {error && <p>Something went wrong</p>}\n      <div>\n        <button onClick={goBack} type=\"button\">\n          <AiOutlineArrowLeft />\n          Go back\n        </button>\n        {/* <NavLink to={location.state?.from ?? '/'} className={css.Btn}>\n          <AiOutlineArrowLeft /> Go back\n        </NavLink> */}\n        {movie && (\n          <section>\n            <img src={`${IMG_URL}${movie.poster_path}`} alt={movie.title} />\n            <div>\n              <h2>{movie.title}</h2>\n              <p>UserScore: {movie.vote_average.toFixed(1)}</p>\n              <h3>Overview</h3>\n              <p>{movie.overview}</p>\n              <h3>Genres</h3>\n              <p>{movie.genres.map(genre => genre.name).join(' / ')}</p>\n            </div>\n          </section>\n        )}\n      </div>\n      <div>\n        <p>Additional information</p>\n        <NavLink to=\"cast\">Casts</NavLink>\n        <NavLink to=\"reviews\">Reviews</NavLink>\n      </div>\n      <Outlet />\n    </main>\n  );\n}\n"],"names":["MovieReview","useState","movie","setMovie","isLoading","setIsLoading","error","setError","id","useParams","navigate","useNavigate","useEffect","fetchMovie","getMovieReview","data","onClick","type","src","poster_path","alt","title","vote_average","toFixed","overview","genres","map","genre","name","join","to"],"sourceRoot":""}