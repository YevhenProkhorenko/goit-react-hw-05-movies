{"version":3,"file":"static/js/881.9dd5b511.chunk.js","mappings":"iRACA,EAA6B,2BAA7B,EAAoE,0BAApE,EAA0G,0B,SCO3F,SAASA,IACtB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA4BJ,EAAAA,EAAAA,UAAS,IAArC,eAAOK,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAQF,EAAaG,IAAI,SACzBC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,GAAKJ,EAAL,CAIA,IAAMK,EAAU,mCAAG,oGAEfX,GAAa,GAFE,UAGIY,EAAAA,EAAAA,IAAgBN,GAHpB,OAGTO,EAHS,OAIff,EAAUe,EAAKC,SAJA,gDAMfC,QAAQC,IAAR,MANe,yBAQfhB,GAAa,GARE,4EAAH,qDAYhBW,GAdC,CAeF,GAAE,CAACL,EAAOL,IAoBX,OACE,6BACE,kBAAMgB,SAZW,SAAAC,GACnBA,EAAEC,iBACoB,KAAlBlB,EAAOmB,QAIXlB,EAAUD,GACVI,EAAgBJ,IAJdoB,MAAM,uBAKT,EAIiCC,UAAWC,EAAzC,WACE,kBAEEC,SAvBa,SAAAN,GACnBA,EAAEC,iBACF,IAAMM,EAAQP,EAAEQ,OAAOD,MACvBvB,EAAUuB,GACVpB,EAAgB,CAAEC,MAAOmB,GAC1B,EAmBOE,KAAK,OACLC,aAAa,KACbH,MAAOxB,EACP4B,UAAU,KACVC,YAAY,8BACZR,UAAWC,KAEb,mBAAQD,UAAWC,EAAnB,wBAEF,gCACGxB,IAAa,SAACgC,EAAA,EAAD,IACblC,IAAU,SAAC,IAAD,CAAYA,OAAQA,EAAQmC,MAAO,CAAEC,KAAMzB,UAI7D,C","sources":["webpack://goit-react-hw-05-movies/./src/pages/Movies/Movies.module.css?82ee","pages/Movies/Movies.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"SearchForm\":\"Movies_SearchForm__EKSZc\",\"TextField\":\"Movies_TextField__TCkE8\",\"SearchBtn\":\"Movies_SearchBtn__z2sgZ\"};","import { useState, useEffect } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom';\nimport { getSearchMovies } from 'Shared/API/FetchMovies';\nimport Loader from 'components/Loader/Loader';\nimport { MoviesList } from 'components/MovieList/MovieList';\nimport css from './Movies.module.css';\n// import debounce from 'lodash/debounce';\n\nexport default function Movies() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [search, setSearch] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n  const location = useLocation();\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n\n    const fetchMovie = async () => {\n      try {\n        setIsLoading(true);\n        const data = await getSearchMovies(query);\n        setMovies(data.results);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMovie();\n  }, [query, search]);\n\n  const handleChange = e => {\n    e.preventDefault();\n    const value = e.target.value;\n    setSearch(value);\n    setSearchParams({ query: value });\n  };\n\n  // const debouncedHandleChange = debounce(e => handleChange(e), 3000);\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (search.trim() === '') {\n      alert('No such movie exists');\n      return;\n    }\n    setSearch(search);\n    setSearchParams(search);\n  };\n\n  return (\n    <main>\n      <form onSubmit={handleSubmit} className={css.SearchForm}>\n        <input\n          // onChange={debouncedHandleChange}\n          onChange={handleChange}\n          type=\"text\"\n          autoComplete=\"on\"\n          value={search}\n          autoFocus=\"on\"\n          placeholder=\"Enter the name of the movie\"\n          className={css.TextField}\n        />\n        <button className={css.SearchBtn}>Search</button>\n      </form>\n      <>\n        {isLoading && <Loader />}\n        {movies && <MoviesList movies={movies} state={{ from: location }} />}\n      </>\n    </main>\n  );\n}\n"],"names":["Movies","useState","movies","setMovies","isLoading","setIsLoading","search","setSearch","useSearchParams","searchParams","setSearchParams","query","get","location","useLocation","useEffect","fetchMovie","getSearchMovies","data","results","console","log","onSubmit","e","preventDefault","trim","alert","className","css","onChange","value","target","type","autoComplete","autoFocus","placeholder","Loader","state","from"],"sourceRoot":""}