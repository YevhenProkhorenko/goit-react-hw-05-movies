{"version":3,"file":"static/js/872.504eff84.chunk.js","mappings":"wQACA,EAA4B,wBAA5B,EAA0D,kB,SCI7CA,EAAW,SAAC,GACvB,OADoC,EAAXC,KACbC,KAAI,YAAiD,IAA9CC,EAA6C,EAA7CA,aAAcC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UAC9C,OACE,gBAAmBC,UAAWC,EAA9B,UACGJ,GACC,gBACEK,IAAG,UARC,oCAQD,OAAeL,GAClBM,IAAKL,EACLE,UAAWC,KAGb,gBAAKC,IAAI,GAAGC,IAAKL,KAEnB,uBAAIA,KACJ,uCAAeC,QAXRK,EAAAA,EAAAA,MAcZ,GACF,ECjBc,SAASC,IACtB,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOX,EAAP,KAAaY,EAAb,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KAEQC,GAAOC,EAAAA,EAAAA,MAAPD,GAoBR,OAlBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,uFACXH,EADW,iEAKdD,GAAa,GALC,UAMKK,EAAAA,EAAAA,IAASJ,GANd,OAMRK,EANQ,OAOdR,EAAQQ,GAPM,kDASdC,MAAM,wBATQ,yBAWdP,GAAa,GAXC,6EAAH,qDAcfI,GACD,GAAE,CAACH,KAGF,0BACGF,IAAa,SAACS,EAAA,EAAD,IACbtB,IAAQ,SAACD,EAAD,CAAUC,KAAMA,EAAKA,SAGnC,C","sources":["webpack://goit-react-hw-05-movies/./src/components/Cast/Cast.module.css?c9ee","components/Cast/CastItem.jsx","components/Cast/Cast.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"List_item\":\"Cast_List_item__sMt29\",\"Img\":\"Cast_Img__iIIvK\"};","import { nanoid } from 'nanoid';\nimport css from '../Cast/Cast.module.css';\n\nconst IMG_URL = 'https://images.tmdb.org/t/p/w500';\n\nexport const CastItem = ({ cast }) => {\n  return cast.map(({ profile_path, original_name, character }) => {\n    return (\n      <li key={nanoid()} className={css.List_item}>\n        {profile_path ? (\n          <img\n            src={`${IMG_URL}${profile_path}`}\n            alt={original_name}\n            className={css.Img}\n          />\n        ) : (\n          <img src=\"\" alt={original_name} />\n        )}\n        <p>{original_name}</p>\n        <p>Character: {character}</p>\n      </li>\n    );\n  });\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Loader from 'components/Loader/Loader';\nimport { getCasts } from 'Shared/API/FetchMovies';\nimport { CastItem } from './CastItem';\n\nexport default function Cast() {\n  const [cast, setCast] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { id } = useParams();\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      if (!id) {\n        return;\n      }\n      try {\n        setIsLoading(true);\n        const data = await getCasts(id);\n        setCast(data);\n      } catch (error) {\n        alert('Something went wrong');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchCast();\n  }, [id]);\n\n  return (\n    <ul>\n      {isLoading && <Loader />}\n      {cast && <CastItem cast={cast.cast} />}\n    </ul>\n  );\n}\n"],"names":["CastItem","cast","map","profile_path","original_name","character","className","css","src","alt","nanoid","Cast","useState","setCast","isLoading","setIsLoading","id","useParams","useEffect","fetchCast","getCasts","data","alert","Loader"],"sourceRoot":""}